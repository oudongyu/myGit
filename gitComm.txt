1.添加文件到仓库
git add readme.txt

2.提交文件
git commit -m "add 3 files.解释说明"

3.将新增的文件同步到 远程库
git push

4.git fetch 更新远程代码到本地仓库
git fetch origin master   //从远程的origin仓库的master分支下载代码到本地的origin master
git log -p master.. origin/master   //比较本地的仓库和远程参考的区别
git merge origin/master   //把远程下载下来的代码合并到本地仓库，远程的和本地的合并


1.git写错了东西 放到了工作区，还没有add：如何撤销
git chekout -- filename

2.git写错了东西，已经add添加到缓存区：如何撤销
git reset HEAD -- filename 回退上一个版本，也就是青虫缓存区内容
git chekout -- filename		清空工作区内容

3.假设你不但改错了东西，还从暂存区提交到了版本库：
 假如还没有把自己的本地版本库推送到远程，可以通过版本回退撤回：
git reset --hard HEAD^
HEAD 表示当前版本
HEAD^ 表示上一个版本
HEAD^^  代表上一个版本
HEAD~100	往上100个版本

也可以通过版本号回退: 版本号没必要写全，写前几位就可以查到
git reset --hard d0e4

如何查看版本号：
git reflog


4.git log命令显示从最近到最远的提交日志

5.git status
对比工作区和版本库的异同

6.git rm filename
真实删除一个文件
删除文件后需要提交
git commit -m

7.git checkout -- filename
恢复删除的文件

8.远程仓库
 01.先设置免密登录 ssh-keygen -t rsa -C "youremail" 一路回车
 02.登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。
 
 添加远程仓库：
	https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000
	
9.git push origin master
把本地master分支的最新修改推送至GitHub

10.git clone
git clone git@github.com:用户名/远程库名.git

11.分支管理
分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。

12.创建dev分支，然后切换到dev分支：
git checkout -b dev

13.git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
git branch dev
git checkout dev


14.查看当前分支
git branch

15.把dev分支的工作成果合并到master分支上
git merge dev

16.删除分支：
git branch -d <name>

17.查看分支合并图
git log --graph

18.--no-ff方式 合并分支，但不会丢掉分支信息

19.bug分支
有紧急bug需要处理，但是dev分支的任务还没完成，所以不能提交给master主支
git stash  储藏功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
储藏好后，可以创建bug分支解决bug，假如在master分支那就在master分支创建临时分支，假如在dev那就在dev

解决好bug，去dev分支查看 (git stash list) 是空的需要恢复

两种方式：
1.用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
2.用git stash pop，恢复的同时把stash内容也删了

20.查看远程库的信息
git remote
git remote -v显示更详细的信息

21.多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式

22.打标签
由于每次修改后的 编码不太好记忆，想恢复到指定位置，特别麻烦，所以可以把 分支 打一个标签 也就是常说的版本号。
git tag <name> 打一个标签
git tag 查看标签
git show v0.9  查看标签详细信息
git tag -a v0.1 -m "version 0.1 released" 1094adb   创建带有说明的标签
git tag v0.9 f52c633   对某一次的修改打标签

23.操作标签
git tag -d v0.1 删除标签
git push origin v1.0  推送某个标签到远程库
git push origin --tags 推送所有尚未推送到远程的本地标签

如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
$ git tag -d v0.9
Deleted tag 'v0.9' (was f52c633)
然后，从远程删除。删除命令也是push，但是格式如下：
$ git push origin :refs/tags/v0.9
To github.com:michaelliao/learngit.git
 - [deleted]         v0.9

24.win10 将秘钥发送到github 方便连接克隆
   1、运行 git Bash 客户端，输入如下代码：
   $ cd ~/.ssh
   $ ls
   这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么你可以跳过步骤2，直接进入步骤3。
   2、创建一个 SSH key
   ssh-keygen -t rsa -C "your_email@example.com" 邮箱写一个qq邮箱即可
   代码参数含义： 
-t 指定密钥类型，默认是 rsa ，可以省略。 
-C 设置注释文字，比如邮箱。 
-f 指定密钥文件存储文件名。
   连按四个回车，生成秘钥
   3、添加你的 SSH key 到 github上面去 
   a、首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：
   clip < ~/.ssh/id_rsa.pub
   b、登录你的github账号，从又上角的设置（ Account Settings ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。 
   c、点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。当   然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github 上的一个别名。默认的会使用你的邮件名称。


代码同步到github流程：
首先进入到项目路径：右键 Git bash Here  然后依次操作：
git init

git add src src你是代码的文件夹

git commit -m  "first commit"  提交注释

git remote add origin https://github.com/oudongyu/hbaseApiAndMR.git   这个是你在github上的项目路径，没有可以去创建一个

git push  -u origin master 同步到github的master主分支

















